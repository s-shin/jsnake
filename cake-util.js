// Generated by CoffeeScript 1.3.3
(function() {
  var error, errorln, exec, handleProc, print, printToStderr, printToStdout, println, run, run2, spawn, styles, _ref,
    __slice = [].slice;

  _ref = require("child_process"), spawn = _ref.spawn, exec = _ref.exec;

  styles = {
    bold: "\x1b[0;1m",
    green: "\x1b[0;32m",
    reset: "\x1b[0m",
    red: "\x1b[0;31m"
  };

  printToStdout = function(s) {
    return process.stdout.write(s);
  };

  printToStderr = function(s) {
    return process.stderr.write(s);
  };

  print = function(str, style, printFn) {
    if (style == null) {
      style = "";
    }
    if (printFn == null) {
      printFn = printToStdout;
    }
    printFn(style + str + styles.reset);
    return 0;
  };

  println = function() {
    var args, str;
    str = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return print.apply(null, [str + "\n"].concat(__slice.call(args)));
  };

  error = function(str, style) {
    print(str, style, printToStderr);
    return 1;
  };

  errorln = function() {
    var args, str;
    str = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return error.apply(null, [str + "\n"].concat(__slice.call(args)));
  };

  handleProc = function(proc, onExit) {
    println("[" + proc.pid + "] started");
    proc.stdout.on("data", function(data) {
      return print("[" + proc.pid + "] " + data);
    });
    proc.stderr.on("data", function(data) {
      return error("[" + proc.pid + "] " + data);
    });
    proc.on("exit", function(code) {
      println("[" + proc.pid + "] exited with " + code);
      if (onExit) {
        return onExit(code);
      }
    });
    return proc;
  };

  run = function(cmd, args, opts, onExit) {
    var p;
    p = spawn(cmd, args, opts);
    return handleProc(p, onExit);
  };

  run2 = function(cmd, opts, onExit) {
    var p;
    p = exec(cmd, opts);
    return handleProc(p, onExit);
  };

  module.exports = {
    styles: styles,
    print: print,
    println: println,
    error: error,
    errorln: errorln,
    handleProc: handleProc,
    run: run,
    run2: run2
  };

}).call(this);
