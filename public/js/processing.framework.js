// Generated by CoffeeScript 1.3.3
(function() {
  var IS_NODE, PF,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PF = (function() {
    var EVENTS, instances, setInstance;

    function PF() {}

    PF.setup = function(canvas, start) {
      return new PF.ProcessingEx(canvas, start, {
        draw: "__draw",
        keyPressed: "__keyPressed",
        keyReleased: "__keyReleased"
      });
    };

    instances = {};

    setInstance = function(id, instance) {
      return instances[id] = instance;
    };

    PF.getInstance = function(id) {
      return this.instances[i];
    };

    EVENTS = ["setup", "draw", "mouseClicked", "mouseDragged", "mouseMoved", "mouseOut", "mouseOver", "mousePressed", "mouseReleased", "keyPressed", "keyReleased"];

    PF.Processing = (function() {
      var id;

      id = 0;

      function _Class(canvas, sketch) {
        var processing;
        this.id = id++;
        if (canvas.dataset) {
          canvas.dataset.pfid = this.id;
        } else {
          canvas.setAttribute("data-pfid");
        }
        processing = new Processing(canvas, function(p) {
          var k, v, _results;
          _results = [];
          for (k in EVENTS) {
            v = EVENTS[k];
            _results.push((function(k, v) {
              if (sketch[v]) {
                return p[v] = (function() {
                  return sketch[v](p);
                });
              }
            })(k, v));
          }
          return _results;
        });
        setInstance(this.id, processing);
      }

      return _Class;

    })();

    PF.ProcessingEx = (function() {
      var DEFAULT_EVENT_MAPPING;

      DEFAULT_EVENT_MAPPING = (function() {
        var i, ret, v, _i, _len;
        ret = {};
        for (i = _i = 0, _len = EVENTS.length; _i < _len; i = ++_i) {
          v = EVENTS[i];
          ret[v] = v;
        }
        return ret;
      })();

      function _Class(canvas, start, eventMapping) {
        var current, k, sketch, v, _fn, _i, _len, _ref;
        if (eventMapping == null) {
          eventMapping = null;
        }
        if (eventMapping) {
          for (k in DEFAULT_EVENT_MAPPING) {
            v = DEFAULT_EVENT_MAPPING[k];
            if ((_ref = eventMapping[k]) == null) {
              eventMapping[k] = v;
            }
          }
        } else {
          eventMapping = DEFAULT_EVENT_MAPPING;
        }
        sketch = {};
        current = start;
        _fn = function(v) {
          return sketch[v] = function(p) {
            var eventFn, next, next2, setupFn;
            eventFn = current[eventMapping[v]];
            if (!eventFn) {
              return;
            }
            next = eventFn.call(current, p);
            if (!next) {
              return;
            }
            while (true) {
              setupFn = next[eventMapping["setup"]];
              if (!setupFn) {
                break;
              }
              next2 = setupFn.call(next, p);
              if (!next2) {
                break;
              }
              next = next2;
            }
            return current = next;
          };
        };
        for (_i = 0, _len = EVENTS.length; _i < _len; _i++) {
          v = EVENTS[_i];
          _fn(v);
        }
        return new PF.Processing(canvas, sketch);
      }

      return _Class;

    })();

    PF.Key = (function() {

      function _Class() {
        this.key = {};
      }

      _Class.prototype.press = function(k) {
        return this.key[this.getCode(k)] = true;
      };

      _Class.prototype.release = function(k) {
        return this.key[this.getCode(k)] = false;
      };

      _Class.prototype.isPressed = function(k) {
        return this.key[this.getCode(k)];
      };

      _Class.prototype.getCode = function(k) {
        if (typeof k === "string") {
          return k.toUpperCase().charCodeAt();
        } else {
          return k;
        }
      };

      return _Class;

    })();

    PF.Scene = (function() {

      function _Class() {
        this.key = new PF.Key;
      }

      _Class.prototype.__draw = function(p) {
        return this.update(p) || this.draw(p);
      };

      _Class.prototype.__keyPressed = function(p) {
        this.key.press(p.keyCode);
        return this.keyPressed(p);
      };

      _Class.prototype.__keyReleased = function(p) {
        this.key.release(p.keyCode);
        return this.keyReleased(p);
      };

      _Class.prototype.update = function(p) {
        return null;
      };

      _Class.prototype.draw = function(p) {
        return null;
      };

      _Class.prototype.keyPressed = function(p) {
        return null;
      };

      _Class.prototype.keyReleased = function(p) {
        return null;
      };

      return _Class;

    })();

    PF.UIBase = (function() {

      function _Class() {}

      _Class.prototype.draw = function(p) {};

      _Class.prototype.update = function(p) {};

      return _Class;

    })();

    PF.UIManager = (function() {

      function _Class() {}

      _Class.prototype.draw = function(p) {};

      _Class.prototype.update = function(p) {};

      return _Class;

    })();

    PF.Button = (function(_super) {

      __extends(_Class, _super);

      function _Class(x, y, w, h, radius, bg1, bg2) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        this.radius = radius;
        this.bg1 = bg1;
        this.bg2 = bg2;
        this.active = false;
      }

      _Class.prototype.draw = function(p) {
        p.pushStyle();
        p.noStroke();
        p.fill.apply(p, (this.active ? this.bg2 : this.bg1));
        p.draw(this.x, this.y, this.w, this.h, this.radius);
        return p.popStyle();
      };

      return _Class;

    })(PF.UIBase);

    PF.TextButton = (function(_super) {

      __extends(_Class, _super);

      function _Class(p, x, y, radius, bg1, bg2, font, size, text) {
        var padding;
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.bg1 = bg1;
        this.bg2 = bg2;
        this.font = font;
        this.size = size;
        this.text = text;
        padding = this.size * 0.4;
        this.h = this.size + padding;
        this.w = p.fontWidth(this.text) + padding;
        _Class.__super__.constructor.call(this, this.x, this.y, this.w, this.h, this.radius, this.bg1, this.b2);
      }

      _Class.prototype.draw = function(p) {
        _Class.__super__.draw.call(this, p);
        p.pushStyle();
        p.textFont(this.font, this.size);
        p.textAlign(p.CENTER, p.CENTER);
        p.text(this.text, this.x, this.y, this.w, this.h);
        return p.popStyle();
      };

      return _Class;

    })(PF.Button);

    return PF;

  })();

  IS_NODE = (typeof exports !== "undefined" && exports !== null) && (typeof module !== "undefined" && module !== null) && (module.exports != null);

  if (!IS_NODE) {
    this.PF = PF;
  }

}).call(this);
