// Generated by CoffeeScript 1.3.3
(function() {
  var BasePhase, EntryPhase, GamePhase, RoomPhase, phase, setupUI,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  setupUI = function() {
    $(".spinner").each(function() {
      var t;
      t = $(this);
      if (t.data("spinner")) {
        return;
      }
      t.attr("data-spinner", true);
      return new Spinner({
        lines: 11,
        length: 4,
        width: 2,
        radius: 4,
        color: "#FFF",
        className: "__spinner__",
        top: 0,
        left: 0
      }).spin(this);
    });
    return $(".show-tooltip").tooltip();
  };

  phase = {
    initialize: function(firstPhase) {
      this.current = ko.observable(firstPhase);
      ko.applyBindings(this);
      return setupUI();
    },
    change: function(p) {
      this.current(p);
      return setupUI();
    }
  };

  BasePhase = (function() {

    function BasePhase(Phase) {
      this.Phase_ = Phase;
    }

    BasePhase.prototype.is = function(Phase) {
      return this.Phase_ === Phase;
    };

    return BasePhase;

  })();

  EntryPhase = (function(_super) {

    __extends(EntryPhase, _super);

    function EntryPhase() {
      EntryPhase.__super__.constructor.call(this, EntryPhase);
      this.isLoading = ko.observable(false);
      this.serverAddress = ko.observable("");
      this.playerName = ko.observable("");
      this.error = ko.observable("");
    }

    EntryPhase.prototype.isError = function() {
      return this.error().length > 0;
    };

    EntryPhase.prototype.isValid = function() {
      return this.serverAddress().length > 0 && this.playerName().length > 0;
    };

    EntryPhase.prototype.entry = function() {
      var _this = this;
      this.error("");
      this.isLoading(true);
      return room.model.entry(this.serverAddress(), this.playerName(), function(err) {
        _this.isLoading(false);
        if (err) {
          return _this.error(err);
        }
        return phase.change(new RoomPhase);
      });
    };

    return EntryPhase;

  })(BasePhase);

  RoomPhase = (function(_super) {
    var Player;

    __extends(RoomPhase, _super);

    Player = (function() {

      function Player(name, isReady) {
        this.name = ko.observable(name);
        this.isMe = name === room.model.playerName;
        this.isReady = ko.observable(isReady);
        this.isReadyBusy = ko.observable(false);
      }

      Player.prototype.isActive = function() {
        return this.name() != null;
      };

      Player.prototype.toggleReadyState = function() {
        this.isReadyBusy(true);
        return room.model.toggleReadyState();
      };

      return Player;

    })();

    function RoomPhase() {
      var _this = this;
      RoomPhase.__super__.constructor.call(this, RoomPhase);
      this.players = ko.observableArray();
      this.serverAddress = room.model.serverAddress;
      room.model.addOnUpdatePlayers(function(players) {
        return _this.updatePlayers(players);
      });
      room.model.addOnSetupGame(function() {
        return phase.change(new GamePhase());
      });
      room.model.updatePlayers();
    }

    RoomPhase.prototype.exit = function() {
      return room.model.exit(function(err) {
        if (!err) {
          return phase.change(new EntryPhase());
        }
      });
    };

    RoomPhase.prototype.updatePlayers = function(players) {
      return this.players(_(players).map(function(p) {
        return new Player(p.name, p.isReady);
      }));
    };

    return RoomPhase;

  })(BasePhase);

  GamePhase = (function(_super) {

    __extends(GamePhase, _super);

    function GamePhase() {
      var _this = this;
      GamePhase.__super__.constructor.call(this, GamePhase);
      this.isLoading = ko.observable(true);
      setTimeout(function() {
        _this.isLoading(false);
        return room.model.setupGame();
      }, 1000);
    }

    return GamePhase;

  })(BasePhase);

  this.room.viewmodel = {
    phase: phase,
    EntryPhase: EntryPhase,
    RoomPhase: RoomPhase,
    GamePhase: GamePhase,
    setup: function() {
      return phase.initialize(new EntryPhase);
    }
  };

}).call(this);
