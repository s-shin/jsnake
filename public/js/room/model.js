// Generated by CoffeeScript 1.3.3
(function() {
  var Model;

  Model = (function() {

    function Model() {
      this.playerName = null;
      this.serverAddress = null;
      this.onUpdatePlayers = [];
      this.onSetupGame = [];
    }

    Model.prototype.getHandlers = function() {
      var T;
      T = this;
      return {
        updatePlayers: function(_arg) {
          var players;
          players = _arg[0];
          T.players = players;
          return _(T.onUpdatePlayers).each(function(fn) {
            return fn(players);
          });
        },
        setupGame: function(_arg, fn) {
          _arg;
          return _(T.onSetupGame).each(function(fn) {
            return fn();
          });
        }
      };
    };

    Model.prototype.addOnUpdatePlayers = function(fn) {
      return this.onUpdatePlayers.push(fn);
    };

    Model.prototype.addOnSetupGame = function(fn) {
      return this.onSetupGame.push(fn);
    };

    Model.prototype.entry = function(serverAddress, name, fn) {
      var T, onSetupFinish, socket;
      T = this;
      socket = io.connect(serverAddress);
      socket.on("error", function() {
        socket.diconnect();
        return fn("Connecting to " + serverAddress + " failed.");
      });
      socket.on("connect", function() {
        return socket.on("setupFinish", onSetupFinish);
      });
      return onSetupFinish = function() {
        var remote;
        remote = new Remote(socket);
        return remote.call("entry", [name], function(_arg) {
          var err;
          err = _arg[0];
          if (err) {
            return fn(err);
          }
          T.remote = remote;
          T.playerName = name;
          T.serverAddress = serverAddress;
          T.remote.register(T.getHandlers());
          return fn(null);
        });
      };
    };

    Model.prototype.updatePlayers = function() {
      return this.remote.call("getPlayers");
    };

    Model.prototype.toggleReadyState = function() {
      return this.remote.call("toggleReadyState", [this.playerName], function(_arg) {
        var err;
        err = _arg[0];
        if (err) {
          return console.log("room.model.toggleReadyState: " + err);
        }
      });
    };

    Model.prototype.exit = function(fn) {
      return this.remote.call("exit", [this.playerName], function(_arg) {
        var err;
        err = _arg[0];
        if (err) {
          fn(err);
        }
        return fn(null);
      });
    };

    Model.prototype.setupGame = function() {
      var OfflinePlayer1, SocketByRemote, p, players, _i, _len, _ref,
        _this = this;
      jsnake.prepare();
      SocketByRemote = jsnake.socket.SocketByRemote;
      OfflinePlayer1 = jsnake.dep.processing.player.OfflinePlayer1;
      players = [];
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p.name === this.playerName) {
          players.push(new OfflinePlayer1(p.playerId));
        }
      }
      return jsnake.setupClient(new SocketByRemote(this.remote), players, (function() {
        return console.log("end");
      }), (function() {
        jsnake.dep.processing.setupView($("canvas")[0]);
        return _this.remote.call("setupGameFinish", [_this.playerName]);
      }));
    };

    return Model;

  })();

  this.room.model = new Model;

}).call(this);
